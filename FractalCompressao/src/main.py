'''
Created on 18/06/2015

@author: Michel Arruda
'''

import os
import sys
import numpy
import random
from cStringIO import StringIO
from scipy import misc
from PIL import Image
from PyQt4 import QtGui as pyQtGui
from PyQt4 import QtCore as pyQtCore
from rexec import FileDelegate

# Specify image width and height
w, h = 32, 32
# Create window
app = pyQtGui.QApplication(sys.argv)
window = pyQtGui.QWidget()
window.setWindowTitle("Fractal")
label = pyQtGui.QLabel(window)
imgx = 32
imgy = 32

def criaImagem():     
	# image size
	image = Image.new("RGB", (imgx, imgy))

	# drawing area
	xa = -2.0
	xb = 2.0
	ya = -1.5
	yb = 1.5
	maxIt = 255 # max iterations allowed

	# find a good Julia set point using the Mandelbrot set
	while True:
	    cx = random.random() * (xb - xa) + xa
	    cy = random.random() * (yb - ya) + ya
	    c = cx + cy * 1j
	    z = c
	    for i in range(maxIt):
	        if abs(z) > 2.0:
	            break 
	        z = z * z + c
	    if i > 10 and i < 100:
	        break

	# draw the Julia set
	for y in range(imgy):
	    zy = y * (yb - ya) / (imgy - 1)  + ya
	    for x in range(imgx):
	        zx = x * (xb - xa) / (imgx - 1)  + xa
	        z = zx + zy * 1j
	        for i in range(maxIt):
	            if abs(z) > 2.0:
	                break 
	            z = z * z + c
	        image.putpixel((x, y), (i % 32 * 32, i % 16 * 16, i % 8 * 8))

	image.save("juliaFr.png", "PNG")

	picfile="juliaFr.png"
	logo = os.getcwd() + "//" + picfile
	pixmap = pyQtGui.QPixmap(logo)
	label.setPixmap(pixmap)

def comprimirImagem(dados):
	
	'''
	codigo = ''
    julia = misc.imread("juliaFr.png")
	for pos_linha in range(len(julia)):
                for pos_coluna in range(len(julia[0])):
                        arrayPixel = julia[pos_linha][pos_coluna]
                        for pos_array in range(len(arrayPixel)):
                                codigo+= str(bin(arrayPixel[pos_array]))[2:].zfill(8)
                                print codigo
        return codigo
	'''
	
"""
def descomprimirImagem(codigo):
        descomp = ""
        i = 0
        for pos_array in codigo:
                if i == 23:
                        descomp = pos_array
                        print descomp,"\n"
                        i=0
                else:
                        descomp = pos_array
                        print descomp,
                        i+=1
        print descomp
"""

def preCompressao():
	julia = misc.imread("juliaFr.png")
	
	f = open('preCompressao.txt', 'w')
	
	palavra = ''
	for pos_linha in range(len(julia)):
		for pos_coluna in range(len(julia[pos_linha])):
			arrayPixel = julia[pos_linha][pos_coluna]
			for pos_array in range(len(arrayPixel)):				
				palavra = palavra + str(arrayPixel[pos_array]) + ","
			palavra = palavra[:-1]	
			palavra = palavra + ";"
		palavra = palavra[:-1]
		palavra = palavra + "-"		
	f.write(palavra)	
	
	return palavra

def compress(uncompressed):
	"""Compress a string to a list of output symbols."""
	fileCompressao = open('compressao.txt', 'w')
	
    # Build the dictionary.
	dict_size = 256
	dictionary = dict((chr(i), chr(i)) for i in xrange(dict_size))
	# in Python 3: dictionary = {chr(i): chr(i) for i in range(dict_size)}
	
	w = ""
	result = []
	for c in uncompressed:
	    wc = w + c
	    if wc in dictionary:
	        w = wc
	    else:
	        result.append(dictionary[w])
	        # Add wc to the dictionary.
	        dictionary[wc] = dict_size
	        dict_size += 1
	        w = c
	
	# Output the code for w.
	if w:
	    result.append(dictionary[w])
	
	fileCompressao.write(str(result))
	return result

def posdecompressao(palavra):
	
	image = Image.new("RGB", (imgx, imgy))

	#seleciona as linhas
	linhas = palavra.split("-")	
	for linha in range(len(linhas)):
		pixels = linhas[linha].split(";")
		for pixel in range(len(pixels)):
			cor = pixels[pixel].split(",")					
			if cor[0]:				
				image.putpixel((linha,pixel), tuple(map(int, cor)))

	image.save("Descomp.png", "PNG")
	
 
def decompress(compressed):
 	"""Decompress a list of output ks to a string."""
 
    # Build the dictionary.
	dict_size = 256
	dictionary = dict((chr(i), chr(i)) for i in xrange(dict_size))
	# in Python 3: dictionary = {chr(i): chr(i) for i in range(dict_size)}
	
	# use StringIO, otherwise this becomes O(N^2)
	# due to string concatenation in a loop
	result = StringIO()
	w = compressed.pop(0)
	result.write(w)
	for k in compressed:
	    if k in dictionary:
	        entry = dictionary[k]
	    elif k == dict_size:
	        entry = w + w[0]
	    else:
	        raise ValueError('Bad compressed k: %s' % k)
	    result.write(entry)
	
	    # Add w+entry[0] to the dictionary.
	    dictionary[dict_size] = w + entry[0]
	    dict_size += 1
	
	    w = entry
	return result.getvalue()


	
if __name__ == '__main__':
	#criaImagem()
	#codigo = preCompressao()
	print "Comprimindo..."	
	codigo = compress('0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0-0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0-0,0,0;0,0,0;0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0;0,0,0;0,0,0-0,0,0;0,0,0;0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;96,48,24;96,48,24;96,48,24;96,48,24;96,48,24;128,64,32;96,48,24;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0;0,0,0;0,0,0-0,0,0;0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;96,48,24;128,64,32;128,64,32;96,48,24;96,48,24;128,64,32;128,64,32;255,224,48;160,80,40;96,48,24;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0;0,0,0-0,0,0;0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;96,48,24;160,80,40;255,16,8;255,160,16;160,80,40;128,64,32;128,64,32;160,80,40;255,192,32;255,48,24;128,64,32;96,48,24;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0;0,0,0-0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;96,48,24;160,80,40;255,176,24;255,144,8;255,128,0;255,144,8;192,96,48;255,128,0;255,48,24;255,128,0;128,64,32;96,48,24;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0-0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;96,48,24;224,112,56;255,224,48;255,0,0;255,64,32;255,224,48;255,0,0;255,128,0;255,192,32;192,96,48;255,208,40;160,80,40;128,64,32;96,48,24;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0-0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;96,48,24;255,208,40;255,96,48;255,192,32;255,192,32;224,112,56;255,176,24;255,176,24;255,16,8;255,16,8;255,144,8;192,96,48;160,80,40;96,48,24;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0-0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;96,48,24;255,192,32;224,112,56;255,64,32;255,128,0;255,32,16;64,32,16;255,224,48;255,48,24;255,128,0;255,144,8;255,176,24;255,160,16;96,48,24;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0-0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;96,48,24;160,80,40;160,80,40;160,80,40;224,112,56;255,192,32;255,192,32;224,112,56;255,32,16;192,96,48;255,240,56;255,224,48;255,128,0;96,48,24;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0-0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;96,48,24;128,64,32;128,64,32;192,96,48;128,64,32;255,176,24;255,0,0;255,16,8;255,128,0;255,192,32;255,128,0;160,80,40;128,64,32;64,32,16;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0-0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;96,48,24;96,48,24;128,64,32;160,80,40;255,144,8;255,128,0;255,160,16;255,224,48;160,80,40;160,80,40;224,112,56;160,80,40;96,48,24;96,48,24;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0-0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;96,48,24;96,48,24;96,48,24;128,64,32;192,96,48;224,112,56;255,144,8;255,16,8;255,48,24;255,240,56;255,128,0;160,80,40;96,48,24;96,48,24;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0-0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;96,48,24;96,48,24;128,64,32;160,80,40;224,112,56;255,192,32;255,144,8;255,128,0;255,64,32;255,64,32;192,96,48;96,48,24;96,48,24;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0-0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;96,48,24;96,48,24;128,64,32;160,80,40;255,144,8;255,208,40;255,192,32;255,16,8;0,0,0;255,16,8;160,80,40;96,48,24;96,48,24;64,32,16;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0-0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;64,32,16;96,48,24;96,48,24;160,80,40;255,16,8;0,0,0;255,16,8;255,192,32;255,208,40;255,144,8;160,80,40;128,64,32;96,48,24;96,48,24;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0-0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;96,48,24;96,48,24;192,96,48;255,64,32;255,64,32;255,128,0;255,144,8;255,192,32;224,112,56;160,80,40;128,64,32;96,48,24;96,48,24;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0-0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;96,48,24;96,48,24;160,80,40;255,128,0;255,240,56;255,48,24;255,16,8;255,144,8;224,112,56;192,96,48;128,64,32;96,48,24;96,48,24;96,48,24;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0-0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;96,48,24;96,48,24;160,80,40;224,112,56;160,80,40;160,80,40;255,224,48;255,160,16;255,128,0;255,144,8;160,80,40;128,64,32;96,48,24;96,48,24;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0-0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;64,32,16;128,64,32;160,80,40;255,128,0;255,192,32;255,128,0;255,16,8;255,0,0;255,176,24;128,64,32;192,96,48;128,64,32;128,64,32;96,48,24;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0-0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;96,48,24;255,128,0;255,224,48;255,240,56;192,96,48;255,32,16;224,112,56;255,192,32;255,192,32;224,112,56;160,80,40;160,80,40;160,80,40;96,48,24;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0-0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;96,48,24;255,160,16;255,176,24;255,144,8;255,128,0;255,48,24;255,224,48;64,32,16;255,32,16;255,128,0;255,64,32;224,112,56;255,192,32;96,48,24;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0-0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;96,48,24;160,80,40;192,96,48;255,144,8;255,16,8;255,16,8;255,176,24;255,176,24;224,112,56;255,192,32;255,192,32;255,96,48;255,208,40;96,48,24;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0-0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;96,48,24;128,64,32;160,80,40;255,208,40;192,96,48;255,192,32;255,128,0;255,0,0;255,224,48;255,64,32;255,0,0;255,224,48;224,112,56;96,48,24;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0-0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;96,48,24;128,64,32;255,128,0;255,48,24;255,128,0;192,96,48;255,144,8;255,128,0;255,144,8;255,176,24;160,80,40;96,48,24;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0-0,0,0;0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;96,48,24;128,64,32;255,48,24;255,192,32;160,80,40;128,64,32;128,64,32;160,80,40;255,160,16;255,16,8;160,80,40;96,48,24;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0;0,0,0-0,0,0;0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;96,48,24;160,80,40;255,224,48;128,64,32;128,64,32;96,48,24;96,48,24;128,64,32;128,64,32;96,48,24;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0;0,0,0-0,0,0;0,0,0;0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;96,48,24;128,64,32;96,48,24;96,48,24;96,48,24;96,48,24;96,48,24;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0;0,0,0;0,0,0-0,0,0;0,0,0;0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0;0,0,0;0,0,0-0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0-0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;64,32,16;64,32,16;64,32,16;64,32,16;64,32,16;32,16,8;32,16,8;32,16,8;32,16,8;32,16,8;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0-')
	print "Descomprimindo..."
	codigo = decompress(codigo)
	print posdecompressao(codigo)

        
        
'''
if __name__ == '__main__':
    # Create widget
    #picfile="julia.pgm"
    picfile="juliaFr.png"
    logo = os.getcwd() + "//" + picfile
    print logo
    if os.path.isfile(logo):
        pixmap = pyQtGui.QPixmap(logo)
        label.setPixmap(pixmap)
        #label.setAlignment(pyQtGui.AlignCenter)
        window.resize(pixmap.width(),pixmap.height()+100)

        labelFuncao = pyQtGui.QLabel(window)
        labelFuncao.setText("f = a + i*b")
        labelFuncao.move(0, h)

        editA = pyQtGui.QLineEdit(window)
        editA.move(0, h+25)

        editB = pyQtGui.QLineEdit(window)
        editB.move(200, h+25) 

        # Add a button
        btn = pyQtGui.QPushButton('Gerar', window)

        btn.clicked.connect(comprimirImagem)
        btn.resize(btn.sizeHint())
        btn.move(400, h+25) 

        # Draw window
        window.show()
        app.exec_()
    else:
        
        print "I expected to find a png picture called julia.png in "+ os.getcwd()

    pass
'''
